---
title: A Julia toolkit for species distribution data
authors:
  - name: Timothée Poisot
    affiliation:
        - ref: udem
    roles:
        - writing
        - software
    email: timothee.poisot@umontreal.ca
    corresponding: true
  - name: Ariane Bussières-Fournel
    affiliation:
        - ref: udem
    email: ariane.bussieres-fournel@umontreal.ca
    roles:
        - editing
  - name: Gabriel Dansereau
    affiliation:
        - ref: udem
    email: gabriel.dansereau@umontreal.ca
    roles:
        - editing
        - software
  - name: Michael D. Catchen
    affiliation:
        - ref: udem
    email: michael.catchen@umontreal.ca
    roles:
        - editing
        - software
affiliations:
    - id: udem
      name: Université de Montréal
      department: Département de Sciences Biologiques
      city: Montréal
      region: QC
      country: Canada
bibliography: references.bib
bibliographystyle: springer-basic-author-date
engine: julia
abstract: (1) Species distribution modeling requires to handle varied types of data, and benefits from an integrated approach to programming. (2) We introduce **SpeciesDistributionToolkit**, a **Julia** package aiming to facilitate the production of species distribution models. It covers various steps of the data collection and analysis process, extending to the development of interfaces for integration of additional functionalities. (3) By relying on semantic versioning and strong design choices on modularity, we expect that this package will lead to improved reproducibility and long-term maintainability. (4) We illustrate the functionalities of the package through several case studies, accompanied by reproducible code.
keywords:
    - species distribution models
    - biogeography
    - occurrence data
    - land use
    - climatic data
    - pseudo-absences
---

# Introduction

Species Distribution Models [SDMs; @Elith2009], in addition to being key tools to further our knowledge of biodiversity, are key components of effective conservation decisions [@Guisan2013-ps], planning [@McShea2014], and ecological impact assesment [@Baker2021]. The training and evaluation of a SDM is a complex process, with key decisions to make on design and reporting [@Zurell2020]. The ability to link data to these steps is central to support the correct interpretation of these models [@Araujo2019]. In the recent years, there has been an increase in the number of software packages and tools to assist ecologists with various steps of the development of species distribution models.

As @Kass2024-vy point out, this increase in the diversity of software tools (most of them in the **R** language) is a good thing. Because the SDMs are a general-purpose methodology, a varied software offers increases the chances that specific decisions can be chained together in the way that best support a specific use case. By making code available for all users, package developers reduce the need for custom implementation of analytical steps, and contribute to the adoption of good practices in the field. However, because building, validating, and applying SDMs requires a diversity of data types, from different sources, many existing packages have been designed independentl. Therefore, they may suffer from low interoperability, which can create friction when using multiple tools together. As an illustration, @Kellner2025 highlight that about 20% of publications for abundance or distribution models are not reproducible because of issues in package dependencies.

To promote interoperability and improve reproductibility, tools that provide an integrated environment are important. In this manuscript, we present **SpeciesDistributionToolkit** (abbreviated as **SDT**), a meta-package for the **Julia** programming language, offering an integrated environment for the retrieval, formatting, and interpretation of data relevant to the modeling of species distributions. **SDT** was in part designed to work within the BON-in-a-Box project [@Gonzalez2023; @Griffith2024], a GEO BON initiative to facilitate the calculation and reporting of biodiversity indicators supporting the Kunming-Montréal Global Biodiversity Framework. A leading design consideration for **SDT** was therefore to maximize interoperability between components and functionalities from the ground up. This is achieved through three mechanisms. First, by relying on strict semantic versioning: package releases provide information about the compatibility of existing code. Second, through the use of interfaces: separate software components (including ones external to the package) can interact without prior knowledge of either implementation, and without *dependencies* between the components of **SDT**. Finally, through the use of **Julia**'s extension mechanism. These are detailed in Box 1.

In this manuscript, we describe provide a high-level overview of the functionalities of the package(s) forming **SDT**. We then discuss design principles that facilitate long-term maintenance, development, and integration. We finish by presenting four illustrative case studies: extraction of data at known species occurrences, manipulation of multiple geospatial layers, training and explanation of a SDM, and creation of virtual communities to simulate the spatial distribution of ecological uniqueness. This later case study is intended to provide an impression of what using **SDT** as a support for the development of novel analyses feels like. All of the case studies are available as supplementary material, in the form of fully reproducible, self-contained Jupyter notebooks.

# Application description

**SpeciesDistributionToolkit** is released as a package for the **Julia** programming language [@Bezanson2017]. It is licensed under the open-source initiative approved MIT license. It has evolved from a previous collection of packages to handle GBIF and raster data [@Dansereau2021], and now provides extended functionalities as well as improved performance. The package is registered in the **Julia** package repository and can be downloaded and installed anonymously. It is compatible with the current long-term support (LTS) release of **Julia**. The full source code, complete commit history, plans for future development, and a forum, are available at [`https://github.com/PoisotLab/SpeciesDistributionToolkit.jl`]. This page additionally has a link to the documentation, containing a full reference for the package functions, a series of briefs how-to examples, and longer vignettes showcasing more integrative tutorials.

  [`https://github.com/PoisotLab/SpeciesDistributionToolkit.jl`]: https://github.com/PoisotLab/SpeciesDistributionToolkit.jl

An overview of the **SDT** package is given in @fig-overview. The project is organized as a "monorepo", in which separate but interoperable packages reside. This allows expanding the scope of the package by moving functionalities into new component packages, without requiring interventions from users. As **SDT** is registered in the **Julia** package repository, it can be installed by using `add SpeciesDistributionToolkit` when in package mode at the **Julia** prompt. When loading the **SDT** package with `using SpeciesDistributionToolkit`, all component packages are automatically and transparently loaded. Therefore, users do not need to know where a specific method or function resides to use it.

![Overview of the packages included in **SpeciesDistributionToolkit**. The packages are color-coded by intended use (acquisition, representation, and analysis of data). The specific content of each package is presented in the main text. Note that because the package relies on *interfaces* to facilitate code interoperability, there are only three dependency relationships (black arrows). Some packages can interact with data sources, represented on the left side of the figure. When loading **SpeciesDistributionToolkit**, all public methods from the package are accessible to the user. Packages that are supported through extensions are in dashed boxes.]

  [Overview of the packages included in **SpeciesDistributionToolkit**. The packages are color-coded by intended use (acquisition, representation, and analysis of data). The specific content of each package is presented in the main text. Note that because the package relies on *interfaces* to facilitate code interoperability, there are only three dependency relationships (black arrows). Some packages can interact with data sources, represented on the left side of the figure. When loading **SpeciesDistributionToolkit**, all public methods from the package are accessible to the user. Packages that are supported through extensions are in dashed boxes.]: figures/structure.drawio.png {#fig-overview}

**SDT** uses the built-in **Julia** package manager to keep all dependencies up to date. Furthermore, we use strict semantic versioning: major versions correspond to changes that would break user-developped code; minor versions represent additional functionalities; patch releases cover minor bug fixes or documentation changes. All component packages are versioned independently, and have their own *CHANGELOG* file documenting each release. This strict reliance on semantic versioning removes the issues of maintaining compatibility when new functionalities are added: all releases in the *v1.x.x* branch of **SDT** depend on component packages in their respective *v1.x.x* branch, and users can benefit from new functionalities without needing to adapt existing code. This behavior is extensively tested, both through unit tests and through integration testing generated as part of the online documentation. Following a constructive cost model analysis [@Kemerer1987] of the version described in this publication, the package represents approx. 11k lines of active code (no blank lines, no comments), for an estimated development cost of approx. 325k USD.

## Component packages

The **SDT** package primarily provides integration between the other packages via method overloading (reusing method names for intuitive and concise code), allowing to efficiently join packages together [@Roesch2023]. Additional functionalities that reside in the top-level package are the generation of pseudo-absences [@Barbet-Massin2012], access to the `gadm.org` database, handling of polygon data and zonal statistics, and various quality of life methods. Because of the modular nature of the code, any of these functions can be transparently moved to their own packages without affecting reproducibility. Note that all packages can still be installed (and would be fully functional) independently.

The **SimpleSDMLayers** package offers a series of types to represent raster data in arbitrary projections defined by a proj string [@Evenden2024]. This package provides the main data representation for most spatial functionalities that **SDT** supports, and handles saving and loading data. It also contains utility functions to deal with raster data, including interpolation to different spatial grids and CRS, rescaling and quantization of data, masking, and most mathematical operations that can be applied to rasters.

**OccurrencesInterface** is a light-weight package to provide a common interface for occurrence data. It implements abstract and concrete types to define a single occurrence and a collection thereof, and a series of methods allowing any occurrence data provider (e.g. GBIF) or data representation to become fully interoperable with the rest of **SDT**. All **SDT** methods that handle occurrence data do so through the interface provided by the **OccurrencesInterface** package, allowing future data sources to be integrated without the need for new code.

The **GBIF** package offers access to the `gbif.org` streaming API [@GBIF:TheGlobalBiodiversityInformationFacility2025], including the ability to retrieve, filter, and restart downloads. Although this package provides a rich data representation for occurrence data when access to the full GBIF data schema is required, all the objects it returns adhere to the **OccurrencesInterface** interface.

**SimpleSDMDatasets** implements an interface to retrieve and locally store raster data, which can be extended by users to support additional data sources. Tt offers access to a series of common data sources for spatial biodiversity modeling, including the biodiversity mapping project [@Jenkins2013], the EarthEnv collection for land cover [@Tuanmu2014] and habitat heterogeneity [@Tuanmu2015], Copernicus land cover 100m data [@Buchhorn2020], PaleoClim [@Brown2018] data, WorldClim 1 and 2 [@Fick2017] and CHELSA 1 and 2 [@Karger2017] and their projections under various RCPs and SSPs.

**Phylopic** offers a wrapper around the `phylopic.org` API to download silhouettes for taxonomic entities. It also provides utilities for citation of the downloaded images. Its functionalities are similar to the **rphylopic** package [@Gearty2023].

**Fauxcurrences** is inspired by the work of @Osborne2022, and allows generating a series of simulated occurrence data that have the same statistical structure as observed ones. The package supports multi-species data, with user-specified weights for conserving intra and inter-specific occurrence distances.

Finally, **SDeMo** provides tools for training and education on species distribution modeling. By providing a series of data transformation (PCA, Whitening, z-score) and classifiers (currently BIOCLIM, Naive Bayes, logistic regression, and decision trees), it offers the basic elements to demonstrate training and evaluation of SDMs, as well as techniques related to heterogeneous ensembles and bagging with support for arbitrary consensus [@Marmion2009] and voting [@Drake2014] functions. **SDeMo** promotes the use of interpretable techniques: the package supports regular [@Elith2005] and inflated [@Zurell2012] partial responses, as well as the calculation and mapping of Shapley values [@Wadoux2023; @Mesgaran2014] using the standard Monte-Carlo approach [@Mitchell2021]. Counterfactuals [@VanLooveren2019; @Karimi2019], representing perturbation of the input data leading to the opposite prediction (*i.e.* "what environmental conditions would lead to the species being absent") can also be generated.

# Case studies

In this section, we provide a series of case studies to illustrate the use of the package. The on-line manual offers longer tutorials, as well as a series of how-to vignettes to illustrate the full scope of what the package allows. As the notebooks accompanying this article cover the full code required to run these case studies, we do not present code snippets in the main text (as they are presented with detailed explanations in the Supp. Mat.), but rather focus on explaining how the component packages work together in each example.

## Landcover consensus map

In this case study (Supp. Mat. 1), we retrieve the land cover data from @Tuanmu2014, clip them to a GeoJSON polygon describing the country of Paraguay (**SDT** can download data directly from `gadm.org`), and apply the `mosaic` operation to figure out which class is the most locally abundant. This case study uses the **SimpleSDMDatasets** package to download (and locally cache) the raster data, as well as the **SimpleSDMLayers** package to provide basic utility functions on raster data. The results are presented in @fig-landcover-consensus.

{{< embed appendix/consensus.ipynb#fig-landcover-consensus >}}

**SimpleSDMDatasets** uses local storage of raster data for future use, to avoid re-downloading data upon repeated use. The location of the data is (i) standardized by the package itself, making the file findable to humans, and (ii) changeable by the user to, *e.g.*, store the data within the project folder rather than in a central location. As much as possible, **SDT** will only read the part of the raster data that is required given the region of interest to the user. This is done by providing additional context in the form of a bounding box (in WGS84, regardless of the underlying raster data projection, in line with the GeoJSON specification). **SDT** has methods to calculate the bounding box for all the objects it supports.

## Using data from GBIF

**SDT** provides strong integration between data on species occurrences and source of geospatial information. To illustrate this, we will collect data on the distribution of *Akodon montensis* (Rodentia, family Cricetidae), a known host of orthohantaviruses [@Burgos2021; @Owen2010], in Paraguay. In Supp. Mat. 2 we (i) request occurrence data using the **GBIF** package, (ii) download the silhouette of the species through **Phylopic**, and (iii) extract temperature and precipitation data at the points of occurrence based on bioclimatic data layers. The results are presented in @fig-gbif-phylopic. The full notebook includes information about basic operations on raster data, as well as extraction of data based on occurrence records.

{{< embed appendix/gbif.ipynb#fig-gbif-phylopic >}}

In practice, although the data are retrieved using the **GBIF** package, they are used internally by **SDT** through the **OccurrencesInterface** package. This package defines a small convention to handle georeferenced occurrence data, and allows to transparently integrate additional occurrence sources. By defining a handful of methods for a custom data type, or by using the convertes built into the package, users can plug-in any occurrence data source or csv file, and enjoy full compatibility with the entire **SDT** functionalities.

## Training a species distribution model

In this case study, we illustrate the integration of **SDeMo** and **SimpleSDMLayers** to train a species distribution model. Specifically, we re-use the data from @fig-gbif-phylopic, with additional layers of bioclimatic variables. We train a rotation forest [@Bagnall2018], an homogeneous ensemble of PCA followed by decision trees where each model has a subset of features and training data. The results are presented in @fig-sdm-output. The model is built by selecting an optimal suite of BioClim variables, then predicted in space, and the resulting predicted species range is finally clipped by the elevational range observed in the occurrence data. The data transformations in **SDeMo** are always applied in a way that prevents the possibility of data leakage [@Stock2023].

{{< embed appendix/sdm.ipynb#fig-sdm-output >}}

The full notebook (Supp. Mat. 3) has additional information on routines for variable selection, stratified cross-validation, as well as the construction of the ensemble from a single PCA and decision tree. In addition, we report in @fig-sdm-responses the partial and inflated partial responses to the most important variable (highlighting an interpretable effect of the variable in the model), as well as the (Monte-Carlo) Shapley values [@Wadoux2023; @Mitchell2021] for each prediction in the training set. Because **SDeMo** works through generic functions, these methods can be applied to any model specified by the user. In practice, flexible (and more performant) ML frameworks exist for **Julia**, notably **MLJ** [@Blaom2020], which should be used for real-world applications.

{{< embed appendix/sdm.ipynb#fig-sdm-responses >}}

## Species and location contribution to beta diversity

In the final case study (Supp. Mat. 4), we simulate the distribution of virtual species [@Hirzel2001] with a logistic response to two environmental covariate [@Leroy2016]. We then use this simulated sample to perform the decomposition of $\beta$-diversity introduced by @Legendre2013 and applied by @Dansereau2022 to spatially continuous data. This simulates the potential distribution of hotspots and coldspots of ecological uniqueness. The results are presented in @fig-virtual-species.

{{< embed appendix/virtualspecies.ipynb#fig-virtual-species >}}

Because the layers used by **SDT** are broadcastable, we can rapidly apply a function (here, the logistic response to the environmental covariate) to each layer, and then multiply the suitabilities together. The last step is facilitated by the fact that most basic arithmetic operations are defined for layers, allowing for example to add, multiply, substract, and divide them by one another.

# Conclusion

We have presented **SpeciesDistributionToolkit**, a package for the **Julia** programming language aiming to facilitate the collection, curation, analysis, and visualisation of data commonly used in species distribution modeling. Through the use of interfaces and a modular design, we have made this package robust to changes, easy to add functionalities to, and well integrated to the rest of the **Julia** ecosystem. All code for the case studies can be found in Supp. Mat. 1-4.

Plans for active development of the package are focused on (i) additional techniques for pseudo-absence generations, likely leading to their separate component package, (ii) full compatibility with the **MultivariateStatistics** for transformation, and (iii) additional **SDeMo** functionalities to allow cross-validation techniques with biologically relevant structure [@Roberts2017].

**Acknowledgements**: TP is funded by an NSERC Discovery grant, a Discovery Acceleration Supplement grant, and a Wellcome Trust grant (223764/Z/21/Z). MDC is funded by an IVADO Postdoctoral Fellowship.

::: {.callout-note collapse="false"}
## **Box 1** - integration with other **Julia** packages

The **SDT** package benefits from close integration with other packages in the **Julia** universe. Notably, this includes **Makie** [including **GeoMakie**; @Danisch2021] for plotting and interactive data visualisation: all relevant plot types are overloaded for layer and occurrence data. Most data handled by **SDT** can be exported using the **Tables** interface, which allows data to be consumed by other packages like **DataFrames** [@Bouchet-Valat2023] and **MLJ** [@Blaom2020], or directly saved as csv files. Interfaces to internal **Julia** methods are implemented whenever they are pertinent. **SimpleSDMLayers** and **OccurrencesInterface** objects behave like arrays, are iterable, and broadcastable. The **SDeMo** package relies in part on the **StatsAPI** interface, allowing to easily define new data transformation and classifier types to support additional features. Achieving integration with other packages through method overloading and the adherence to well-established interfaces is important, as it increases the chances that additional functionalities external to **SDT** can be used directly or fully supported with minimal addition of code. For situations where interfaces are not sufficient to link with other packages, we rely on **Julia**'s extension mechanism. For instance, **SimpleSDMLayers** objects can be used with **Clustering**, as well as **SpatialBoundaries** [@Strydom2023a], with strict version bounds, ensuring that this integration will remain usable regardless of possible changes in external packages.
:::