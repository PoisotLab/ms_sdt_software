{
  "hash": "e041ddb68725f0f82512965dc643bf84",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: A Julia toolkit for species distribution data\nauthors:\n  - name: Timothée Poisot\n    affiliation:\n        - ref: udem\n    roles: writing\n    email: timothee.poisot@umontreal.ca\n    corresponding: true\naffiliations:\n    - id: udem\n      name: Département de Sciences Biologiques, Université de Montréal, Montréal, Canada\nbibliography: references.bib\nengine: julia\nabstract: LATER\n---\n\n\n\n\n\n# Introduction\n\nSpecies Distribution Models (SDMs) are one of the most effective predictive approach to study the global distribution of biodiversity [@Elith2009]. The training and evaluation of a SDM requires many steps, governing both its design and reporting [@Zurell2020] and ultimate use and interpretation [@Araujo2019]. In the recent years, there has been an increase in the number of software packages and tools to assist ecologists with the development of species distribution models. As @Kass2024-vy point out, this increase in the diversity of packages (most of them in the **R** language) is a good thing, as it can accommodate multiple workflows, and contributes to the adoption of good practices in the field.\n\nBecause the practice of species distribution modeling and analysis usually involve many different data types, tools that can provide an integrated environment are important: many existing packages have been designed independently, and therefore may suffer when it comes to interoperability. In this manuscript, we present **SpeciesDistributionToolkit** (abbreviated as **SDT**), a meta-package for the **Julia** programming language, offering an integrated environment for the retrieval, formatting, and interpretation of data relevant to the modeling of species distributions.\n\nprevious pub @Dansereau2021\n\n@Griffith2024 for large-scale SDM\n\n# Application description\n\n...\n\n## Component packages\n\nAn overview of the **SDT** package is given in @fig-components. The project is organized as a \"monorepo\", in which multiple packages live. This allows expanding the scope of the package by moving functionalities into new component packages, without complexifying the installation process. At **SDT** is registered in the **Julia** package repository, it can be installed with:\n\n``` julia\nimport Pkg; Pkg.add(\"SpeciesDistributionToolkit\")\n```\n\nWhen loading the **SDT** package with `using SpeciesDistributionToolkit`, all component packages are automatically and transparently loaded. Therefore, users do not need to know where a specific method or function resides to use it. In the next section, we discuss how this modular design ensure that we can grow the functionality of the toolkit over time, while maintaining strict backward compatibility *and* allowing full reproducibility of an analysis.\n\n![Overview of the packages]\n\n  [Overview of the packages]: figures/SDT.png {#fig-components}\n\n**GBIF**\n\n**SimpleSDMDatasets**\n\n**Phylopic**\n\n**OccurrencesInterface**\n\n**SimpleSDMLayers**\n\nThe **Fauxcurrences** packages is inspired by the work of @Osborne2022, and\n\n**SDeMo**\n\n## Software information\n\n**SDT** uses the built-in **Julia** package manager to ensure that the version of all dependencies are kept up to date. Furthermore, we use strict semantic versioning: major versions correspond to no breaking changes in user-developped code, minor versions increase with additional functionalities, and patch releases cover minor bug fixes or documentation changes. All packages have a *CHANGELOG* file, which documents what changes are included in each release.\n\nThis strict reliance on semantic versioning solves the issues of maintaining compatibility when new functionalities are added: all releases in the *v1.x.x* branch of **SDT** depend on component packages in their respective *v1.x.x* branch, and users can benefit from now functionalities without risking to break existing code. This behavior is extensively tested, both using unit tests, and through integration testing generated as part of the online documentation.\n\n@Kellner2025 reported that about 20% of failures to reproduce species distribution or abundance modeling code was related to package issues. The strict reliance on semantic versioning, alongside technical choices in the **Julia** package manager and repository, means that it is possible to specify the full version of all dependencies used in a project, which addresses this important obstacle to reproducibility.\n\n## Integration with other packages\n\nThe **SDT** package benefits from close integration with other packages in the Julia universe. Notably, this includes **Makie** (and all related backends) for plotting and data visualisation, where usual plot types are overloaded for layer and occurrence data. Most data can be exported using the **Tables** interface, which allows data to be consumed by other packages like **DataFrames** and **MLJ**. Interfaces internal to Julia are also implemented whenever they make sense. Layers behave like arrays, are iterable, and broadcastable; occurrences collections are arrays and iterables.\n\nBeyond supporting external interfaces, **SDT** defines its own internally. Access to raster data is supported by a trait-based interface for **SimpleSDMDatasets**.\n\nInternal use of other interfaces like **StatsAPI** in **SDeMo**\n\none of the component packages (**OccurrencesInterface**) implements a minimalist interface to facilite the consumption of occurrence data.\n\n\n# Illustrative case studies\n\nIn this section, we provide a series of case studies, meant to illustrate the use of the package. The on-line documentation offers longer tutorials, as well as a series of how-to vignettes to illustrate the full scope of what the package allows. The code for each of these case studies is available as fully independent Jupyter notebooks, forming the supplementary material of this article. The example we use throughout is the distribution of *Akodon montensis* (Rodentia, family Cricetidae), and a host or orthohantaviruses [@Burgos2021; @Owen2010], in Paraguay. As the notebooks accompanying this article cover the full code required to run these examples, we do not present code snippets in the main text, and instead focus on explaining which component packages are used in each example.\n\n## Landcover consensus map\n\nIn this case study, we retrieve the land cover data from @Tuanmu2014, clip them to a GeoJSON polygon describing the country of Paraguay (**SDT** can download data directly from `gadm.org`), and apply the `mosaic` operation to figure out which class is the most locally abundant. This case study uses the **SimpleSDMDatasets** package to download (and locally cache) the raster data, as well as the **SimpleSDMLayers** package to provide basic utility functions on raster data.\n\n\n\n\n\n{{< embed appendix/consensus.ipynb#fig-landcover-consensus >}}\n\n\n\n\n\n\n\n\n## Using data from GBIF\n\n[@GBIF:TheGlobalBiodiversityInformationFacility2025]\n\n[@Karger2017]\n\n\n\n\n\n{{< embed appendix/gbif.ipynb#fig-gbif-phylopic >}}\n\n\n\n\n\n\n\n\nIn practice, although the data are retrieved using  the **GBIF** package, they are used internally by **SDT** through the **OccurrencesInterface** package. This package defines a small convention to handle georeferenced occurrence data, and allows to transparently integrate additional occurrence sources. By defining five methods for a custom data type, users can plug-in any occurrence data source and enjoy full compatibility with the entire **SDT** functionalities.\n\n## Training a species distribution model\n\n[@Bagnall2018]\n\nPA routines from @Barbet-Massin2012\n\n\n\n\n\n{{< embed appendix/sdm.ipynb#fig-sdm-output >}}\n\n\n\n\n\n\n\n\n## Generating the distribution of a virtual species\n\n[@Leroy2016]\n\n\n\n\n\n{{< embed appendix/virtualspecies.ipynb#fig-virtual-species >}}\n\n\n\n\n\n\n\n\n# References\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}